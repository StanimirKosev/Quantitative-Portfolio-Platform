name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west1
  ARTIFACT_REGISTRY_REPO: mc

jobs:
  backend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction

      - name: Run backend tests
        working-directory: ./backend
        run: poetry run pytest simulation/tests/ optimization/tests/ -v --tb=short

      - name: Run code quality checks
        working-directory: ./backend
        run: poetry run python -m py_compile $(find . -name "*.py")

  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  deploy:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-backend:${{ github.sha }} ./backend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-backend:${{ github.sha }}

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy mc-backend \
            --project=${{ env.GCP_PROJECT_ID }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-backend:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars="FRED_API_KEY=${{ secrets.FRED_API_KEY }}" \
            --memory=2Gi \
            --cpu=2 \
            --timeout=300

      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe mc-backend --project=${{ env.GCP_PROJECT_ID }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        run: |
          docker build \
            --build-arg VITE_API_URL=${{ steps.backend-url.outputs.url }} \
            -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-frontend:${{ github.sha }} \
            ./frontend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-frontend:${{ github.sha }}

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy mc-frontend \
            --project=${{ env.GCP_PROJECT_ID }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/montecarlo-frontend:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --timeout=60
